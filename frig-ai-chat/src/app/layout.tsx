
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import LeftSidebar from "./components/LeftSidebar";
import RightSidebar from "./components/RightSidebar";
'use client'; // Required for hooks like useState, useEffect
import { useEffect } from 'react'; // Import useEffect
import ResizablePane from "./components/ResizablePane"; // Import ResizablePane
import useKeyboardShortcuts from "./hooks/useKeyboardShortcuts"; // Import the hook
import { saveState, loadState } from "./lib/sessionManager"; // Import session manager
import "./styles/resizablePane.css"; // Import Resizer CSS
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  // Keyboard Shortcut Handler
  const handleShortcut = (action: string) => {
    console.log(`RootLayout Handling action: ${action}`);
    // Implement routing or state changes based on action here
    // e.g., if (action === 'openSearch') { /* logic to open search modal or tab */ }
    // e.g., if (action === 'toggleLeftSidebar') { /* logic to toggle sidebar visibility/size */ }
    // e.g., if (action === 'openTerminalTab') { /* logic to switch right sidebar tab */ }
    alert(`Shortcut triggered: ${action}`); // Placeholder feedback
  };
  useKeyboardShortcuts({ onShortcutTrigger: handleShortcut });

  // Example: Persist/Load some global layout setting if needed
  // useEffect(() => {
  //   const savedSetting = loadState('globalLayoutSetting');
  //   if (savedSetting) {
  //     // Apply setting
  //   }
  //   // Example save on unmount or specific event
  //   return () => {
  //     // saveState('globalLayoutSetting', currentSetting);
  //   };
  // }, []);

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased font-sans bg-background-primary text-text-primary`} // Added base colors
      >
        {/* Main layout container using ResizablePanes */}
        {/* Fine-tune default sizes and min/max constraints here */}
        {/* Visual handles/resizer style are in resizablePane.css */}
        {/* Use flex-col on small screens, flex-row on medium and up */}
        <div className="flex flex-col md:flex-row h-screen w-screen overflow-hidden">
          {/* Left Sidebar: Adjust width and visibility for mobile */}
          {/* Implement a toggle button for mobile sidebar visibility here */}
          <div className="w-full md:w-auto shrink-0"> {/* Takes full width on mobile, auto on md+ */}
            <ResizablePane
              split="vertical"
              minSize={50} // Smaller min size for mobile potentially
              maxSize={400} // Add max size constraint
              defaultSize={280} // Default width for LeftSidebar
              storageKey="leftSidebarWidth"
              resizerClassName="Resizer hidden md:block" // Hide resizer on small screens
              className="h-1/4 md:h-full" // Takes partial height on mobile, full on md+
            >
              <LeftSidebar />
            </ResizablePane>
          </div>

          {/* Main Content + Right Sidebar Container */}
          <div className="flex-1 flex flex-col md:flex-row overflow-hidden"> {/* Manages remaining space */}
            {/* Right Pane: Main Content + Right Sidebar */}
            {/* Right sidebar might also need mobile toggling */}
            <ResizablePane
              split="vertical"
              primary="second" // Right sidebar size is fixed, main content adjusts
              minSize={300} // Min width for the main content area (adjust as needed)
              defaultSize={320} // Default width for RightSidebar
              storageKey="rightSidebarWidth"
              resizerClassName="Resizer hidden md:block" // Hide resizer on small screens
              className="flex-1 flex" // Ensure this pane fills the container
            >
              {/* Left Pane (of this nested pane): Main Content */}
              {/* Ensure main takes full height and allows scrolling */}
              <main className="flex-1 flex flex-col overflow-y-auto h-full">
                {children} {/* ChatInterface will be rendered here */}
              </main>

              {/* Right Pane (of this nested pane): Right Sidebar */}
              {/* Adjust width for mobile if needed, or hide */}
              <div className="w-full md:w-auto shrink-0"> {/* Takes full width on mobile if stacked, auto on md+ */}\n                 <RightSidebar />\n              </div>\n            </ResizablePane>\n          </div>\n        </div>\n      </body>\n    </html>\n  );\n}\n\n/* Remove the old ResizablePane structure */\n/*\n          <ResizablePane\n            split=\"vertical\"\n            minSize={200}\n            defaultSize={280} // Default width for LeftSidebar\n            storageKey=\"leftSidebarWidth\"\n            resizerClassName=\"Resizer\" // Apply CSS class\n          >\n            {/* Left Pane: Left Sidebar */}\n            <LeftSidebar />\n\n            {/* Right Pane: Main Content + Right Sidebar */}\n            <ResizablePane\n              split=\"vertical\"\n              primary=\"second\" // Right sidebar size is fixed, main content adjusts\n              minSize={400} // Min width for the main content area\n              defaultSize={320} // Default width for RightSidebar\n              storageKey=\"rightSidebarWidth\"\n              resizerClassName=\"Resizer\" // Apply CSS class\n            >\n              {/* Left Pane (of this nested pane): Main Content */}\n              <main className=\"flex-1 flex flex-col overflow-hidden h-full\"> {/* Ensure main takes full height */}\n                {children} {/* ChatInterface will be rendered here */}\n              </main>\n\n              {/* Right Pane (of this nested pane): Right Sidebar */}\n              <RightSidebar />\n            </ResizablePane>\n          </ResizablePane>\n        </div>\n      </body>\n    </html>\n  );\n}\n",
